package model;

import java.math.BigDecimal;

import oracle.binding.AttributeContext;
import oracle.binding.RowContext;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Apr 12 19:22:04 CEST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CompetenceImpl extends EntityImpl {
    public boolean isTransactionDirty() {
        return false;
    }

    public void rollbackTransaction() {
    }

    public void commitTransaction() {
    }

    public boolean setAttributeValue(AttributeContext p0, Object p1) {
        return false;
    }

    public Object createRowData(RowContext p0) {
        return null;
    }

    public Object registerDataProvider(RowContext p0) {
        return null;
    }

    public boolean removeRowData(RowContext p0) {
        return false;
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        IdCompetence,
        Nom,
        Description,
        Assurer,
        Posseder,
        Requerir;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int IDCOMPETENCE = AttributesEnum.IdCompetence.index();
    public static final int NOM = AttributesEnum.Nom.index();
    public static final int DESCRIPTION = AttributesEnum.Description.index();
    public static final int ASSURER = AttributesEnum.Assurer.index();
    public static final int POSSEDER = AttributesEnum.Posseder.index();
    public static final int REQUERIR = AttributesEnum.Requerir.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CompetenceImpl() {
    }

    /**
     * Gets the attribute value for IdCompetence, using the alias name IdCompetence.
     * @return the value of IdCompetence
     */
    public BigDecimal getIdCompetence() {
        return (BigDecimal) getAttributeInternal(IDCOMPETENCE);
    }

    /**
     * Sets <code>value</code> as the attribute value for IdCompetence.
     * @param value value to set the IdCompetence
     */
    public void setIdCompetence(BigDecimal value) {
        setAttributeInternal(IDCOMPETENCE, value);
    }

    /**
     * Gets the attribute value for Nom, using the alias name Nom.
     * @return the value of Nom
     */
    public String getNom() {
        return (String) getAttributeInternal(NOM);
    }

    /**
     * Sets <code>value</code> as the attribute value for Nom.
     * @param value value to set the Nom
     */
    public void setNom(String value) {
        setAttributeInternal(NOM, value);
    }

    /**
     * Gets the attribute value for Description, using the alias name Description.
     * @return the value of Description
     */
    public String getDescription() {
        return (String) getAttributeInternal(DESCRIPTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for Description.
     * @param value value to set the Description
     */
    public void setDescription(String value) {
        setAttributeInternal(DESCRIPTION, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getAssurer() {
        return (RowIterator) getAttributeInternal(ASSURER);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getPosseder() {
        return (RowIterator) getAttributeInternal(POSSEDER);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getRequerir() {
        return (RowIterator) getAttributeInternal(REQUERIR);
    }

    /**
     * @param idCompetence key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal idCompetence) {
        return new Key(new Object[] { idCompetence });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.Competence");
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}

